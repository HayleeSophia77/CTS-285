"""
Datamon - Streamlit Version

A math problem helper that helps students, teachers and parents
make math fun.

Haylee Kaheel Teresa Aryan James
"""
import streamlit as st
import random
import ast
import operator
import time

# Supported operators for safe_eval
OPERATORS = {
    ast.Add: operator.add,
    ast.Sub: operator.sub,
    ast.Mult: operator.mul,
    ast.Div: operator.truediv,
    ast.Pow: operator.pow,
    ast.USub: operator.neg
}

# Basic operators for Answer Checker
basic_operators = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.truediv
}

# Initialize session state
if 'player_points' not in st.session_state:
    st.session_state.player_points = 0
if 'memory_problems' not in st.session_state:
    st.session_state.memory_problems = []
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'home'
if 'quiz_state' not in st.session_state:
    st.session_state.quiz_state = None
if 'memory_quiz_state' not in st.session_state:
    st.session_state.memory_quiz_state = None
if 'electro_state' not in st.session_state:
    st.session_state.electro_state = None

def safe_eval(expr):
    """
    Safely evaluate a mathematical expression string using AST parsing.
    Supports +, -, *, /, ** and parentheses.
    """
    def _eval(node):
        if isinstance(node, ast.Expression):
            return _eval(node.body)
        elif isinstance(node, ast.Num):
            return node.n
        elif isinstance(node, ast.BinOp):
            op_func = OPERATORS[type(node.op)]
            return op_func(_eval(node.left), _eval(node.right))
        elif isinstance(node, ast.UnaryOp):
            op_func = OPERATORS[type(node.op)]
            return op_func(_eval(node.operand))
        else:
            raise TypeError(f"Unsupported type: {node}")
    
    try:
        node = ast.parse(expr, mode='eval')
        return _eval(node)
    except Exception as e:
        raise ValueError(f"Invalid expression: {expr}. Error: {e}")

def fun_feedback(correct, attempts):
    """
    Depending on how many the user got correct and the attempts will display
    a special message for the user.
    """
    if correct == attempts and attempts != 0:
        return "Perfect score! You're a math wizard!"
    elif correct > attempts * 0.75:
        return "Great job! You really know your stuff."
    elif correct > attempts * 0.5:
        return "Not bad! Keep practicing and you'll get even better."
    elif correct > 0:
        return "You got some right! Don't give up ‚Äî try again!"
    else:
        return "Oof, tough round! Time to hit the books."

def check_answer(problem):
    """Check if the answer to a problem is correct (Answer Checker module)"""
    try:
        equation, user_answer = problem.split('=')
        operator_symbol = None
        first_num = second_num = None

        matched = [(symbol, equation.split(symbol)) for symbol in basic_operators if symbol in equation]

        if not matched or len(matched[0][1]) != 2:
            return False, "Invalid equation format."

        operator_symbol, (left, right) = matched[0]
        first_num = float(left)
        second_num = float(right)

        operator_function = basic_operators[operator_symbol]
        correct_answer = operator_function(first_num, second_num)

        if float(user_answer) == correct_answer:
            return True, "Correct!"
        else:
            return False, f"Wrong! The correct answer is {correct_answer}."

    except Exception as e:
        return False, f"Error: {e}"

# ============= HOME PAGE =============
def home_page():
    st.title("üéì Datamon - Math Helper")
    st.subheader("Making Math Fun for Students, Teachers, and Parents!")
    
    st.metric("Total Points", st.session_state.player_points)
    
    st.write("---")
    st.write("### Choose a Game Mode:")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write("#### üìù Answer Checker")
        st.write("Solve 10 math problems and check your answers!")
        if st.button("Start Answer Checker", key="btn_answer"):
            st.session_state.current_page = 'answer_checker'
            st.session_state.quiz_state = {'current': 0, 'score': 0, 'problems': []}
            st.rerun()
    
    with col2:
        st.write("#### üß† Memory Bank")
        st.write("Add custom problems and practice them!")
        if st.button("Start Memory Bank", key="btn_memory"):
            st.session_state.current_page = 'memory_bank'
            st.rerun()
    
    with col3:
        st.write("#### ‚ö° Electro Flash")
        st.write("Practice multiplication tables quickly!")
        if st.button("Start Electro Flash", key="btn_electro"):
            st.session_state.current_page = 'electro_flash'
            st.rerun()

# ============= ANSWER CHECKER =============
def answer_checker_page():
    st.title("üìù Answer Checker")
    
    if st.button("‚Üê Back to Home"):
        st.session_state.current_page = 'home'
        st.session_state.quiz_state = None
        st.rerun()
    
    quiz = st.session_state.quiz_state
    
    if quiz['current'] < 10:
        st.write(f"### Problem {quiz['current'] + 1} of 10")
        st.write(f"**Current Score: {quiz['score']}/10**")
        
        with st.form(key=f"problem_form_{quiz['current']}"):
            problem = st.text_input("Enter a math problem (e.g., 4+4=8):", key=f"input_{quiz['current']}")
            submitted = st.form_submit_button("Submit Answer")
            
            if submitted and problem:
                is_correct, message = check_answer(problem)
                
                if is_correct:
                    st.success(message)
                    quiz['score'] += 1
                    st.session_state.player_points += 1
                else:
                    st.error(message)
                
                quiz['problems'].append({'problem': problem, 'correct': is_correct})
                quiz['current'] += 1
                time.sleep(1)
                st.rerun()
    else:
        st.write("## Quiz Complete! üéâ")
        st.metric("Final Score", f"{quiz['score']}/10")
        st.balloons()
        
        if st.button("Return to Home"):
            st.session_state.current_page = 'home'
            st.session_state.quiz_state = None
            st.rerun()

# ============= MEMORY BANK =============
def memory_bank_page():
    st.title("üß† Memory Bank")
    
    if st.button("‚Üê Back to Home"):
        st.session_state.current_page = 'home'
        st.rerun()
    
    tab1, tab2, tab3 = st.tabs(["Add Problems", "Practice Problems", "View Problems"])
    
    with tab1:
        st.write("### Add Problems to Memory Bank")
        st.write("Enter math problems (max 10 at a time)")
        
        num_problems = st.number_input("How many problems to add?", min_value=1, max_value=10, value=1)
        
        with st.form(key="add_problems_form"):
            problems_to_add = []
            for i in range(num_problems):
                problem = st.text_input(f"Problem {i+1} (e.g., 5+5 or 3*4-2):", key=f"new_prob_{i}")
                problems_to_add.append(problem)
            
            submitted = st.form_submit_button("Add Problems")
            
            if submitted:
                valid_problems = []
                for prob in problems_to_add:
                    if prob.strip():
                        try:
                            safe_eval(prob)
                            valid_problems.append(prob)
                        except Exception as e:
                            st.error(f"Invalid problem '{prob}': {e}")
                
                if valid_problems:
                    st.session_state.memory_problems.extend(valid_problems)
                    st.success(f"Added {len(valid_problems)} problem(s)!")
    
    with tab2:
        st.write("### Practice Memory Bank Problems")
        
        if not st.session_state.memory_problems:
            st.warning("No problems available. Please add problems first.")
        else:
            st.write(f"**{len(st.session_state.memory_problems)} problems in memory bank**")
            
            if st.session_state.memory_quiz_state is None:
                if st.button("Start Practice Session"):
                    problems_copy = st.session_state.memory_problems.copy()
                    random.shuffle(problems_copy)
                    st.session_state.memory_quiz_state = {
                        'problems': problems_copy,
                        'current_idx': 0,
                        'attempts': 0,
                        'correct': 0,
                        'tries_left': 3
                    }
                    st.rerun()
            else:
                quiz = st.session_state.memory_quiz_state
                
                if quiz['current_idx'] < len(quiz['problems']):
                    problem = quiz['problems'][quiz['current_idx']]
                    st.write(f"### Problem {quiz['current_idx'] + 1} of {len(quiz['problems'])}")
                    st.write(f"**Solve this: {problem}**")
                    st.write(f"Tries left: {quiz['tries_left']}")
                    
                    with st.form(key=f"memory_answer_{quiz['current_idx']}"):
                        user_answer = st.number_input("Your answer:", format="%.4f", key=f"mem_ans_{quiz['current_idx']}")
                        submitted = st.form_submit_button("Submit")
                        
                        if submitted:
                            quiz['attempts'] += 1
                            try:
                                correct_answer = safe_eval(problem)
                                if abs(user_answer - correct_answer) < 1e-6:
                                    st.success("Correct!")
                                    quiz['correct'] += 1
                                    quiz['current_idx'] += 1
                                    quiz['tries_left'] = 3
                                    st.session_state.player_points += 1
                                else:
                                    quiz['tries_left'] -= 1
                                    if quiz['tries_left'] > 0:
                                        st.error("Incorrect. Try again!")
                                    else:
                                        st.error(f"Out of tries. The correct answer was: {correct_answer}")
                                        quiz['current_idx'] += 1
                                        quiz['tries_left'] = 3
                            except Exception as e:
                                st.error(f"Error evaluating problem: {e}")
                                quiz['current_idx'] += 1
                                quiz['tries_left'] = 3
                            
                            time.sleep(1)
                            st.rerun()
                else:
                    st.write("## Practice Complete! üéâ")
                    st.metric("Correct Answers", f"{quiz['correct']}/{quiz['attempts']} attempts")
                    st.write(fun_feedback(quiz['correct'], quiz['attempts']))
                    
                    if st.button("Finish Session"):
                        st.session_state.memory_quiz_state = None
                        st.rerun()
    
    with tab3:
        st.write("### Current Problems in Memory Bank")
        if st.session_state.memory_problems:
            for i, prob in enumerate(st.session_state.memory_problems, 1):
                st.write(f"{i}. {prob}")
            
            if st.button("Clear All Problems"):
                st.session_state.memory_problems = []
                st.rerun()
        else:
            st.info("No problems in memory bank yet.")

# ============= ELECTRO FLASH =============
def electro_flash_page():
    st.title("‚ö° Electro Flash")
    
    if st.button("‚Üê Back to Home"):
        st.session_state.current_page = 'home'
        st.session_state.electro_state = None
        st.rerun()
    
    st.write("Practice your math tables the fun way and defeat AntiMath!")
    
    if st.session_state.electro_state is None:
        st.write("### Setup")
        
        with st.form(key="electro_setup"):
            table = st.number_input("Pick a base number:", min_value=1, max_value=20, value=5)
            operation = st.selectbox("Choose operation:", ['+', '-', '*', '/'])
            submitted = st.form_submit_button("Start Game")
            
            if submitted:
                numbers = list(range(1, 13))
                random.shuffle(numbers)
                
                st.session_state.electro_state = {
                    'table': table,
                    'operation': operation,
                    'numbers': numbers,
                    'current_idx': 0,
                    'score': 0,
                    'tries_left': 2,
                    'start_time': time.time()
                }
                st.rerun()
    else:
        game = st.session_state.electro_state
        
        if game['current_idx'] < 5:
            num = game['numbers'][game['current_idx']]
            
            if game['operation'] == '+':
                first = game['table']
                second = num
                correct_answer = first + num
            elif game['operation'] == '-':
                first = num + game['table']
                second = game['table']
                correct_answer = first - game['table']
            elif game['operation'] == '*':
                first = game['table']
                second = num
                correct_answer = first * num
            elif game['operation'] == '/':
                first = num * game['table']
                second = game['table']
                correct_answer = round(first / game['table'], 2)
            
            st.write(f"### Problem {game['current_idx'] + 1} of 5")
            st.write(f"**Score: {game['score']}/5**")
            st.write(f"**Tries left: {game['tries_left']}**")
            
            with st.form(key=f"electro_answer_{game['current_idx']}"):
                st.write(f"### {first} {game['operation']} {second} = ?")
                user_answer = st.number_input("Your answer:", format="%.2f", key=f"electro_ans_{game['current_idx']}")
                submitted = st.form_submit_button("Submit")
                
                if submitted:
                    if abs(user_answer - correct_answer) < 0.01:
                        st.success("Correct!")
                        game['score'] += 1
                        game['current_idx'] += 1
                        game['tries_left'] = 2
                        st.session_state.player_points += 1
                    else:
                        game['tries_left'] -= 1
                        if game['tries_left'] > 0:
                            st.error("Try again!")
                        else:
                            st.error(f"Answer was {correct_answer}")
                            game['current_idx'] += 1
                            game['tries_left'] = 2
                    
                    time.sleep(1)
                    st.rerun()
        else:
            elapsed = round(time.time() - game['start_time'], 2)
            st.write("## Game Over! üéâ")
            st.metric("Score", f"{game['score']}/5")
            st.metric("Time", f"{elapsed} seconds")
            
            if game['score'] == 5:
                st.success("Amazing! You're lightning fast! AntiMath won't stand a chance!")
                st.balloons()
            
            if st.button("Play Again"):
                st.session_state.electro_state = None
                st.rerun()

# ============= MAIN APP =============
def main():
    st.set_page_config(page_title="Datamon", page_icon="üéì", layout="wide")
    
    # Sidebar
    with st.sidebar:
        st.title("üéì Datamon")
        st.write("---")
        st.metric("Total Points", st.session_state.player_points)
        st.write("---")
        st.write("**Created by:**")
        st.write("Haylee, Kaheel, Teresa, Aryan, James")
    
    # Route to appropriate page
    if st.session_state.current_page == 'home':
        home_page()
    elif st.session_state.current_page == 'answer_checker':
        answer_checker_page()
    elif st.session_state.current_page == 'memory_bank':
        memory_bank_page()
    elif st.session_state.current_page == 'electro_flash':
        electro_flash_page()

if __name__ == "__main__":
    main()
